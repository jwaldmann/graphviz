% graphviz - TODO
% Ivan Lazar Miljenovic

Future Plans for graphviz
=========================

This is a list of planned feature improvements to graphviz along with
an indication of when it's likely to be implemented (note that these
time scales are in relation to releases, not actual time).

Short term
----------

* Quickstart-style documentation to help users get going with graphviz
  quickly.

* Add support for SVG colors.

* Re-name the fields of `DotEdge` to be more user-friendly.

* Define new classes to distinguish between printing/parsing Attribute
  values and other values (as only the former requires quoted
  variants).

* Extend the various DotRepr implementations:

    - Add one that is useable as a graph.

    - Add a monadic version ala dotgen.

Medium term
-----------

* Improve the test suite such that the generated `DotGraph` and
  `GDotGraph` values are valid (and thus can be passed to Graphviz
  proper).  This may not in fact be possible as guaranteeing an
  arbitrary `Attribute` is valid is rather tricky (as the value itself
  needs to be verified, especially stateful ones).

* Add support for non-visualisation Graphviz tools (e.g. dijkstra and
  tred).

* Add support for clusters as endpoints of edges.

Long term
---------

* Allow usage of non-FGL graphs with graphviz.  This will require
  implementing a separate library to represent graphs (see initial
  discussions about this
  [here](http://www.haskell.org/pipermail/haskell-cafe/2009-June/063402.html)).

<!--
     Local Variables:
     mode:markdown
     End:
  -->

